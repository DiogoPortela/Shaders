//#pragma kernel CSTextureRender

#pragma kernel CSCornerSamples
#pragma kernel CSCellData

/*[numthreads(4, 4, 1)]
void CSTextureRender (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id / textureSize;
    uv = uv * meshSize - float2(meshSize, meshSize) / 2;
    float4 color = float4(0, 0, 0, 1);
    float metaballs = 0;

    for(int i = 0; i < arrayCount; i++)
        metaballs += Metaball(uv, blobInstanceArray[i]);
    if(metaballs >= 1)
        color.x = metaballs;

    SmallTexture[id.xy] = color;
}*/

RWTexture2D<float4> SmallTexture;
RWStructuredBuffer<float2> blobInstanceArray;
float arrayCount;
float textureSize;
float blobRadius;
float meshSize;
float arraySize;
RWStructuredBuffer<float> cornersData;
RWStructuredBuffer<int> cellsData;

float Metaball(float2 uv, float2 pos){
    return blobRadius / dot(uv - pos, uv - pos);
}

[numthreads(4,4,1)]
void CSCornerSamples(uint3 id : SV_DISPATCHTHREADID)
{
    float2 uv = id / textureSize;
    uv = uv * meshSize - float2(meshSize, meshSize) / 2;
    float metaballs = 0;

    for(int i = 0; i < arrayCount; i++)
        metaballs += Metaball(uv, blobInstanceArray[i]);

    cornersData[id.x + textureSize * id.y] = metaballs;
}

bool CheckIfPossible(int2 index){
    if(index.x > arraySize || index.y > arraySize)
        return false;
    return true;
}
int GetCoords(int2 pos){
    return pos.x + pos.y * arraySize;
}
[numthreads(4,4,1)]
void CSCellData(uint3 id : SV_DISPATCHTHREADID)
{
    int value = 0;

    float4 st = float4(0,0,0,1
    );
    int2 currentPos = int2(id.x, id.y);
    if(cornersData[GetCoords(currentPos)] >= 1.0){ 
        value += 8;
    }

    currentPos = int2(id.x + 1, id.y);
    if(CheckIfPossible(currentPos) && cornersData[GetCoords(currentPos)] >= 1){
        value += 1;
    }

    currentPos = int2(id.x, id.y + 1);
    if(CheckIfPossible(currentPos) && cornersData[GetCoords(currentPos)] >= 1){
        value += 4;
    }

    currentPos = int2(id.x + 1, id.y + 1);
    if(CheckIfPossible(currentPos) && cornersData[GetCoords(currentPos)] >= 1){
        value += 2;
    }

    cellsData[id.x + id.y * (arraySize - 1)] = value;

    currentPos = int2(id.x, id.y);
}
